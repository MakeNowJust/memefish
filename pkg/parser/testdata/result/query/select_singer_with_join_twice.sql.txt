--- select_singer_with_join_twice.sql
SELECT
  *
FROM
  Singers A
  JOIN
  Singers B
  ON A.SingerID = B.SingerID
  INNER JOIN
  Singers C
  ON A.SingerID = C.SingerID

--- AST
&parser.QueryStatement{
  Hint:  (*parser.Hint)(nil),
  Query: &parser.Select{
    pos:      0,
    Distinct: false,
    AsStruct: false,
    Results:  []parser.SelectItem{
      &parser.Star{
        pos: 9,
      },
    },
    From: &parser.From{
      pos:   11,
      Items: []*parser.FromItem{
        &parser.FromItem{
          Source: &parser.Join{
            Op:     "INNER",
            Method: "",
            Hint:   (*parser.Hint)(nil),
            Left:   &parser.Join{
              Op:     "INNER",
              Method: "",
              Hint:   (*parser.Hint)(nil),
              Left:   &parser.Unnest{
                pos:      18,
                end:      27,
                Implicit: true,
                Expr:     &parser.Ident{
                  pos:  18,
                  end:  25,
                  Name: "Singers",
                },
                Hint: (*parser.Hint)(nil),
                As:   &parser.AsAlias{
                  pos:   26,
                  Alias: &parser.Ident{
                    pos:  26,
                    end:  27,
                    Name: "A",
                  },
                },
                WithOffset: (*parser.WithOffset)(nil),
              },
              Right: &parser.Unnest{
                pos:      37,
                end:      46,
                Implicit: true,
                Expr:     &parser.Ident{
                  pos:  37,
                  end:  44,
                  Name: "Singers",
                },
                Hint: (*parser.Hint)(nil),
                As:   &parser.AsAlias{
                  pos:   45,
                  Alias: &parser.Ident{
                    pos:  45,
                    end:  46,
                    Name: "B",
                  },
                },
                WithOffset: (*parser.WithOffset)(nil),
              },
              Cond: &parser.On{
                pos:  49,
                Expr: &parser.BinaryExpr{
                  Op:   "=",
                  Left: &parser.Path{
                    Idents: []*parser.Ident{
                      &parser.Ident{
                        pos:  52,
                        end:  53,
                        Name: "A",
                      },
                      &parser.Ident{
                        pos:  54,
                        end:  62,
                        Name: "SingerID",
                      },
                    },
                  },
                  Right: &parser.Path{
                    Idents: []*parser.Ident{
                      &parser.Ident{
                        pos:  65,
                        end:  66,
                        Name: "B",
                      },
                      &parser.Ident{
                        pos:  67,
                        end:  75,
                        Name: "SingerID",
                      },
                    },
                  },
                },
              },
            },
            Right: &parser.Unnest{
              pos:      91,
              end:      100,
              Implicit: true,
              Expr:     &parser.Ident{
                pos:  91,
                end:  98,
                Name: "Singers",
              },
              Hint: (*parser.Hint)(nil),
              As:   &parser.AsAlias{
                pos:   99,
                Alias: &parser.Ident{
                  pos:  99,
                  end:  100,
                  Name: "C",
                },
              },
              WithOffset: (*parser.WithOffset)(nil),
            },
            Cond: &parser.On{
              pos:  103,
              Expr: &parser.BinaryExpr{
                Op:   "=",
                Left: &parser.Path{
                  Idents: []*parser.Ident{
                    &parser.Ident{
                      pos:  106,
                      end:  107,
                      Name: "A",
                    },
                    &parser.Ident{
                      pos:  108,
                      end:  116,
                      Name: "SingerID",
                    },
                  },
                },
                Right: &parser.Path{
                  Idents: []*parser.Ident{
                    &parser.Ident{
                      pos:  119,
                      end:  120,
                      Name: "C",
                    },
                    &parser.Ident{
                      pos:  121,
                      end:  129,
                      Name: "SingerID",
                    },
                  },
                },
              },
            },
          },
          TableSample: (*parser.TableSample)(nil),
        },
      },
    },
    Where:   (*parser.Where)(nil),
    GroupBy: (*parser.GroupBy)(nil),
    Having:  (*parser.Having)(nil),
    OrderBy: (*parser.OrderBy)(nil),
    Limit:   (*parser.Limit)(nil),
  },
}

--- SQL
SELECT * FROM Singers AS A INNER JOIN Singers AS B ON A.SingerID = B.SingerID INNER JOIN Singers AS C ON A.SingerID = C.SingerID
