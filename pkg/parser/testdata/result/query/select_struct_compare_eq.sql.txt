--- select_struct_compare_eq.sql
SELECT ARRAY(
  SELECT
    *
  FROM
    (SELECT STRUCT<X INT64, Y INT64, Y INT64>(1, 2, 3)) AS S
  WHERE S = STRUCT(STRUCT(1, 2, 3))
)

--- AST
&parser.QueryStatement{
  Hint: (*parser.Hint)(nil),
  Expr: &parser.Select{
    pos:      0,
    end:      134,
    Distinct: false,
    AsStruct: false,
    List:     parser.SelectExprList{
      &parser.SelectExpr{
        pos:  7,
        end:  134,
        Expr: &parser.ArrayExpr{
          pos:  7,
          Expr: &parser.SubQuery{
            pos:  12,
            end:  134,
            Expr: &parser.Select{
              pos:      16,
              end:      132,
              Distinct: false,
              AsStruct: false,
              List:     parser.SelectExprList{
                &parser.SelectExpr{
                  pos:  27,
                  end:  28,
                  Expr: nil,
                  Star: true,
                  As:   (*parser.Ident)(nil),
                },
              },
              From: parser.FromItemList{
                &parser.FromItem{
                  end:  96,
                  Expr: &parser.SubQueryJoinExpr{
                    end:  96,
                    Expr: &parser.SubQuery{
                      pos:  40,
                      end:  91,
                      Expr: &parser.Select{
                        pos:      41,
                        end:      90,
                        Distinct: false,
                        AsStruct: false,
                        List:     parser.SelectExprList{
                          &parser.SelectExpr{
                            pos:  48,
                            end:  90,
                            Expr: &parser.StructLit{
                              pos:    48,
                              end:    90,
                              Fields: []*parser.FieldSchema{
                                &parser.FieldSchema{
                                  Name: &parser.Ident{
                                    pos:  55,
                                    end:  56,
                                    Name: "X",
                                  },
                                  Type: &parser.Type{
                                    pos:    57,
                                    end:    62,
                                    Name:   "INT64",
                                    Fields: []*parser.FieldSchema{},
                                    Value:  (*parser.Type)(nil),
                                  },
                                },
                                &parser.FieldSchema{
                                  Name: &parser.Ident{
                                    pos:  64,
                                    end:  65,
                                    Name: "Y",
                                  },
                                  Type: &parser.Type{
                                    pos:    66,
                                    end:    71,
                                    Name:   "INT64",
                                    Fields: []*parser.FieldSchema{},
                                    Value:  (*parser.Type)(nil),
                                  },
                                },
                                &parser.FieldSchema{
                                  Name: &parser.Ident{
                                    pos:  73,
                                    end:  74,
                                    Name: "Y",
                                  },
                                  Type: &parser.Type{
                                    pos:    75,
                                    end:    80,
                                    Name:   "INT64",
                                    Fields: []*parser.FieldSchema{},
                                    Value:  (*parser.Type)(nil),
                                  },
                                },
                              },
                              Values: parser.ExprList{
                                &parser.IntLit{
                                  pos:   82,
                                  end:   83,
                                  Value: "1",
                                },
                                &parser.IntLit{
                                  pos:   85,
                                  end:   86,
                                  Value: "2",
                                },
                                &parser.IntLit{
                                  pos:   88,
                                  end:   89,
                                  Value: "3",
                                },
                              },
                            },
                            Star: false,
                            As:   (*parser.Ident)(nil),
                          },
                        },
                        From:    parser.FromItemList{},
                        Where:   nil,
                        GroupBy: parser.ExprList{},
                        Having:  nil,
                        OrderBy: parser.OrderExprList{},
                        Limit:   (*parser.Limit)(nil),
                      },
                    },
                    Hint: (*parser.Hint)(nil),
                    As:   &parser.Ident{
                      pos:  95,
                      end:  96,
                      Name: "S",
                    },
                  },
                  Method: "",
                  Num:    nil,
                  Rows:   false,
                },
              },
              Where: &parser.BinaryExpr{
                Op:   "=",
                Left: &parser.Ident{
                  pos:  105,
                  end:  106,
                  Name: "S",
                },
                Right: &parser.StructLit{
                  pos:    109,
                  end:    132,
                  Fields: []*parser.FieldSchema{},
                  Values: parser.ExprList{
                    &parser.StructLit{
                      pos:    116,
                      end:    131,
                      Fields: []*parser.FieldSchema{},
                      Values: parser.ExprList{
                        &parser.IntLit{
                          pos:   123,
                          end:   124,
                          Value: "1",
                        },
                        &parser.IntLit{
                          pos:   126,
                          end:   127,
                          Value: "2",
                        },
                        &parser.IntLit{
                          pos:   129,
                          end:   130,
                          Value: "3",
                        },
                      },
                    },
                  },
                },
              },
              GroupBy: parser.ExprList{},
              Having:  nil,
              OrderBy: parser.OrderExprList{},
              Limit:   (*parser.Limit)(nil),
            },
          },
        },
        Star: false,
        As:   (*parser.Ident)(nil),
      },
    },
    From:    parser.FromItemList{},
    Where:   nil,
    GroupBy: parser.ExprList{},
    Having:  nil,
    OrderBy: parser.OrderExprList{},
    Limit:   (*parser.Limit)(nil),
  },
}

--- SQL
SELECT ARRAY(SELECT * FROM (SELECT STRUCT<X INT64, Y INT64, Y INT64>(1, 2, 3)) AS S WHERE S = STRUCT(STRUCT(1, 2, 3)))
