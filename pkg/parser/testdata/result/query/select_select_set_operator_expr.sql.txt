--- select_select_set_operator_expr.sql
select ((select 1) union all (select 2)) + 3,
       ((select 1) intersect all (select 1)) + 3,
       ((select 1) except all (select 1)) + 3
--- AST
&parser.QueryStatement{
  Hint:  (*parser.Hint)(nil),
  Query: &parser.Select{
    pos:      0,
    Distinct: false,
    AsStruct: false,
    Results:  []parser.SelectItem{
      &parser.ExprSelectItem{
        Expr: &parser.BinaryExpr{
          Op:   "+",
          Left: &parser.ScalarSubQuery{
            pos:   7,
            end:   40,
            Query: &parser.CompoundQuery{
              Op:       "UNION",
              Distinct: false,
              Queries:  []parser.QueryExpr{
                &parser.SubQuery{
                  pos:   8,
                  end:   18,
                  Query: &parser.Select{
                    pos:      9,
                    Distinct: false,
                    AsStruct: false,
                    Results:  []parser.SelectItem{
                      &parser.ExprSelectItem{
                        Expr: &parser.IntLiteral{
                          pos:   16,
                          end:   17,
                          Base:  10,
                          Value: "1",
                        },
                      },
                    },
                    From:    (*parser.From)(nil),
                    Where:   (*parser.Where)(nil),
                    GroupBy: (*parser.GroupBy)(nil),
                    Having:  (*parser.Having)(nil),
                    OrderBy: (*parser.OrderBy)(nil),
                    Limit:   (*parser.Limit)(nil),
                  },
                  OrderBy: (*parser.OrderBy)(nil),
                  Limit:   (*parser.Limit)(nil),
                },
                &parser.SubQuery{
                  pos:   29,
                  end:   39,
                  Query: &parser.Select{
                    pos:      30,
                    Distinct: false,
                    AsStruct: false,
                    Results:  []parser.SelectItem{
                      &parser.ExprSelectItem{
                        Expr: &parser.IntLiteral{
                          pos:   37,
                          end:   38,
                          Base:  10,
                          Value: "2",
                        },
                      },
                    },
                    From:    (*parser.From)(nil),
                    Where:   (*parser.Where)(nil),
                    GroupBy: (*parser.GroupBy)(nil),
                    Having:  (*parser.Having)(nil),
                    OrderBy: (*parser.OrderBy)(nil),
                    Limit:   (*parser.Limit)(nil),
                  },
                  OrderBy: (*parser.OrderBy)(nil),
                  Limit:   (*parser.Limit)(nil),
                },
              },
              OrderBy: (*parser.OrderBy)(nil),
              Limit:   (*parser.Limit)(nil),
            },
          },
          Right: &parser.IntLiteral{
            pos:   43,
            end:   44,
            Base:  10,
            Value: "3",
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.BinaryExpr{
          Op:   "+",
          Left: &parser.ScalarSubQuery{
            pos:   53,
            end:   90,
            Query: &parser.CompoundQuery{
              Op:       "INTERSECT",
              Distinct: false,
              Queries:  []parser.QueryExpr{
                &parser.SubQuery{
                  pos:   54,
                  end:   64,
                  Query: &parser.Select{
                    pos:      55,
                    Distinct: false,
                    AsStruct: false,
                    Results:  []parser.SelectItem{
                      &parser.ExprSelectItem{
                        Expr: &parser.IntLiteral{
                          pos:   62,
                          end:   63,
                          Base:  10,
                          Value: "1",
                        },
                      },
                    },
                    From:    (*parser.From)(nil),
                    Where:   (*parser.Where)(nil),
                    GroupBy: (*parser.GroupBy)(nil),
                    Having:  (*parser.Having)(nil),
                    OrderBy: (*parser.OrderBy)(nil),
                    Limit:   (*parser.Limit)(nil),
                  },
                  OrderBy: (*parser.OrderBy)(nil),
                  Limit:   (*parser.Limit)(nil),
                },
                &parser.SubQuery{
                  pos:   79,
                  end:   89,
                  Query: &parser.Select{
                    pos:      80,
                    Distinct: false,
                    AsStruct: false,
                    Results:  []parser.SelectItem{
                      &parser.ExprSelectItem{
                        Expr: &parser.IntLiteral{
                          pos:   87,
                          end:   88,
                          Base:  10,
                          Value: "1",
                        },
                      },
                    },
                    From:    (*parser.From)(nil),
                    Where:   (*parser.Where)(nil),
                    GroupBy: (*parser.GroupBy)(nil),
                    Having:  (*parser.Having)(nil),
                    OrderBy: (*parser.OrderBy)(nil),
                    Limit:   (*parser.Limit)(nil),
                  },
                  OrderBy: (*parser.OrderBy)(nil),
                  Limit:   (*parser.Limit)(nil),
                },
              },
              OrderBy: (*parser.OrderBy)(nil),
              Limit:   (*parser.Limit)(nil),
            },
          },
          Right: &parser.IntLiteral{
            pos:   93,
            end:   94,
            Base:  10,
            Value: "3",
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.BinaryExpr{
          Op:   "+",
          Left: &parser.ScalarSubQuery{
            pos:   103,
            end:   137,
            Query: &parser.CompoundQuery{
              Op:       "EXCEPT",
              Distinct: false,
              Queries:  []parser.QueryExpr{
                &parser.SubQuery{
                  pos:   104,
                  end:   114,
                  Query: &parser.Select{
                    pos:      105,
                    Distinct: false,
                    AsStruct: false,
                    Results:  []parser.SelectItem{
                      &parser.ExprSelectItem{
                        Expr: &parser.IntLiteral{
                          pos:   112,
                          end:   113,
                          Base:  10,
                          Value: "1",
                        },
                      },
                    },
                    From:    (*parser.From)(nil),
                    Where:   (*parser.Where)(nil),
                    GroupBy: (*parser.GroupBy)(nil),
                    Having:  (*parser.Having)(nil),
                    OrderBy: (*parser.OrderBy)(nil),
                    Limit:   (*parser.Limit)(nil),
                  },
                  OrderBy: (*parser.OrderBy)(nil),
                  Limit:   (*parser.Limit)(nil),
                },
                &parser.SubQuery{
                  pos:   126,
                  end:   136,
                  Query: &parser.Select{
                    pos:      127,
                    Distinct: false,
                    AsStruct: false,
                    Results:  []parser.SelectItem{
                      &parser.ExprSelectItem{
                        Expr: &parser.IntLiteral{
                          pos:   134,
                          end:   135,
                          Base:  10,
                          Value: "1",
                        },
                      },
                    },
                    From:    (*parser.From)(nil),
                    Where:   (*parser.Where)(nil),
                    GroupBy: (*parser.GroupBy)(nil),
                    Having:  (*parser.Having)(nil),
                    OrderBy: (*parser.OrderBy)(nil),
                    Limit:   (*parser.Limit)(nil),
                  },
                  OrderBy: (*parser.OrderBy)(nil),
                  Limit:   (*parser.Limit)(nil),
                },
              },
              OrderBy: (*parser.OrderBy)(nil),
              Limit:   (*parser.Limit)(nil),
            },
          },
          Right: &parser.IntLiteral{
            pos:   140,
            end:   141,
            Base:  10,
            Value: "3",
          },
        },
      },
    },
    From:    (*parser.From)(nil),
    Where:   (*parser.Where)(nil),
    GroupBy: (*parser.GroupBy)(nil),
    Having:  (*parser.Having)(nil),
    OrderBy: (*parser.OrderBy)(nil),
    Limit:   (*parser.Limit)(nil),
  },
}

--- SQL
SELECT ((SELECT 1) UNION ALL (SELECT 2)) + 3, ((SELECT 1) INTERSECT ALL (SELECT 1)) + 3, ((SELECT 1) EXCEPT ALL (SELECT 1)) + 3
