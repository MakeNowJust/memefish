--- select_literals_struct.sql
SELECT
  ARRAY(SELECT STRUCT(1, 2, 3)),
  ARRAY(SELECT STRUCT(1, 2, TRUE)),
  ARRAY(SELECT STRUCT<X INT64, Y INT64, Z INT64>(1, 2, 3)),
  ARRAY(SELECT STRUCT<INT64, INT64, INT64>(1, 2, 3)),
  ARRAY(SELECT STRUCT<X INT64, INT64, INT64>(1, 2, 3)),
  ARRAY(SELECT (1, 2, 3)),
  ARRAY(SELECT STRUCT<>()),
  EXISTS(SELECT (1, 2))

--- AST
&parser.QueryStatement{
  Hint:  (*parser.Hint)(nil),
  Query: &parser.Select{
    pos:      0,
    Distinct: false,
    AsStruct: false,
    Results:  []parser.SelectItem{
      &parser.ExprSelectItem{
        Expr: &parser.ArraySubQuery{
          pos:   9,
          end:   38,
          Query: &parser.Select{
            pos:      15,
            Distinct: false,
            AsStruct: false,
            Results:  []parser.SelectItem{
              &parser.ExprSelectItem{
                Expr: &parser.StructLiteral{
                  pos:    22,
                  end:    37,
                  Fields: []*parser.FieldType{},
                  Values: []parser.Expr{
                    &parser.IntLiteral{
                      pos:   29,
                      end:   30,
                      Base:  10,
                      Value: "1",
                    },
                    &parser.IntLiteral{
                      pos:   32,
                      end:   33,
                      Base:  10,
                      Value: "2",
                    },
                    &parser.IntLiteral{
                      pos:   35,
                      end:   36,
                      Base:  10,
                      Value: "3",
                    },
                  },
                },
              },
            },
            From:    (*parser.From)(nil),
            Where:   (*parser.Where)(nil),
            GroupBy: (*parser.GroupBy)(nil),
            Having:  (*parser.Having)(nil),
            OrderBy: (*parser.OrderBy)(nil),
            Limit:   (*parser.Limit)(nil),
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.ArraySubQuery{
          pos:   42,
          end:   74,
          Query: &parser.Select{
            pos:      48,
            Distinct: false,
            AsStruct: false,
            Results:  []parser.SelectItem{
              &parser.ExprSelectItem{
                Expr: &parser.StructLiteral{
                  pos:    55,
                  end:    73,
                  Fields: []*parser.FieldType{},
                  Values: []parser.Expr{
                    &parser.IntLiteral{
                      pos:   62,
                      end:   63,
                      Base:  10,
                      Value: "1",
                    },
                    &parser.IntLiteral{
                      pos:   65,
                      end:   66,
                      Base:  10,
                      Value: "2",
                    },
                    &parser.BoolLiteral{
                      pos:   68,
                      Value: true,
                    },
                  },
                },
              },
            },
            From:    (*parser.From)(nil),
            Where:   (*parser.Where)(nil),
            GroupBy: (*parser.GroupBy)(nil),
            Having:  (*parser.Having)(nil),
            OrderBy: (*parser.OrderBy)(nil),
            Limit:   (*parser.Limit)(nil),
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.ArraySubQuery{
          pos:   78,
          end:   134,
          Query: &parser.Select{
            pos:      84,
            Distinct: false,
            AsStruct: false,
            Results:  []parser.SelectItem{
              &parser.ExprSelectItem{
                Expr: &parser.StructLiteral{
                  pos:    91,
                  end:    133,
                  Fields: []*parser.FieldType{
                    &parser.FieldType{
                      Member: &parser.Ident{
                        pos:  98,
                        end:  99,
                        Name: "X",
                      },
                      Type: &parser.SimpleType{
                        pos:  100,
                        Name: "INT64",
                      },
                    },
                    &parser.FieldType{
                      Member: &parser.Ident{
                        pos:  107,
                        end:  108,
                        Name: "Y",
                      },
                      Type: &parser.SimpleType{
                        pos:  109,
                        Name: "INT64",
                      },
                    },
                    &parser.FieldType{
                      Member: &parser.Ident{
                        pos:  116,
                        end:  117,
                        Name: "Z",
                      },
                      Type: &parser.SimpleType{
                        pos:  118,
                        Name: "INT64",
                      },
                    },
                  },
                  Values: []parser.Expr{
                    &parser.IntLiteral{
                      pos:   125,
                      end:   126,
                      Base:  10,
                      Value: "1",
                    },
                    &parser.IntLiteral{
                      pos:   128,
                      end:   129,
                      Base:  10,
                      Value: "2",
                    },
                    &parser.IntLiteral{
                      pos:   131,
                      end:   132,
                      Base:  10,
                      Value: "3",
                    },
                  },
                },
              },
            },
            From:    (*parser.From)(nil),
            Where:   (*parser.Where)(nil),
            GroupBy: (*parser.GroupBy)(nil),
            Having:  (*parser.Having)(nil),
            OrderBy: (*parser.OrderBy)(nil),
            Limit:   (*parser.Limit)(nil),
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.ArraySubQuery{
          pos:   138,
          end:   188,
          Query: &parser.Select{
            pos:      144,
            Distinct: false,
            AsStruct: false,
            Results:  []parser.SelectItem{
              &parser.ExprSelectItem{
                Expr: &parser.StructLiteral{
                  pos:    151,
                  end:    187,
                  Fields: []*parser.FieldType{
                    &parser.FieldType{
                      Member: (*parser.Ident)(nil),
                      Type:   &parser.SimpleType{
                        pos:  158,
                        Name: "INT64",
                      },
                    },
                    &parser.FieldType{
                      Member: (*parser.Ident)(nil),
                      Type:   &parser.SimpleType{
                        pos:  165,
                        Name: "INT64",
                      },
                    },
                    &parser.FieldType{
                      Member: (*parser.Ident)(nil),
                      Type:   &parser.SimpleType{
                        pos:  172,
                        Name: "INT64",
                      },
                    },
                  },
                  Values: []parser.Expr{
                    &parser.IntLiteral{
                      pos:   179,
                      end:   180,
                      Base:  10,
                      Value: "1",
                    },
                    &parser.IntLiteral{
                      pos:   182,
                      end:   183,
                      Base:  10,
                      Value: "2",
                    },
                    &parser.IntLiteral{
                      pos:   185,
                      end:   186,
                      Base:  10,
                      Value: "3",
                    },
                  },
                },
              },
            },
            From:    (*parser.From)(nil),
            Where:   (*parser.Where)(nil),
            GroupBy: (*parser.GroupBy)(nil),
            Having:  (*parser.Having)(nil),
            OrderBy: (*parser.OrderBy)(nil),
            Limit:   (*parser.Limit)(nil),
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.ArraySubQuery{
          pos:   192,
          end:   244,
          Query: &parser.Select{
            pos:      198,
            Distinct: false,
            AsStruct: false,
            Results:  []parser.SelectItem{
              &parser.ExprSelectItem{
                Expr: &parser.StructLiteral{
                  pos:    205,
                  end:    243,
                  Fields: []*parser.FieldType{
                    &parser.FieldType{
                      Member: &parser.Ident{
                        pos:  212,
                        end:  213,
                        Name: "X",
                      },
                      Type: &parser.SimpleType{
                        pos:  214,
                        Name: "INT64",
                      },
                    },
                    &parser.FieldType{
                      Member: (*parser.Ident)(nil),
                      Type:   &parser.SimpleType{
                        pos:  221,
                        Name: "INT64",
                      },
                    },
                    &parser.FieldType{
                      Member: (*parser.Ident)(nil),
                      Type:   &parser.SimpleType{
                        pos:  228,
                        Name: "INT64",
                      },
                    },
                  },
                  Values: []parser.Expr{
                    &parser.IntLiteral{
                      pos:   235,
                      end:   236,
                      Base:  10,
                      Value: "1",
                    },
                    &parser.IntLiteral{
                      pos:   238,
                      end:   239,
                      Base:  10,
                      Value: "2",
                    },
                    &parser.IntLiteral{
                      pos:   241,
                      end:   242,
                      Base:  10,
                      Value: "3",
                    },
                  },
                },
              },
            },
            From:    (*parser.From)(nil),
            Where:   (*parser.Where)(nil),
            GroupBy: (*parser.GroupBy)(nil),
            Having:  (*parser.Having)(nil),
            OrderBy: (*parser.OrderBy)(nil),
            Limit:   (*parser.Limit)(nil),
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.ArraySubQuery{
          pos:   248,
          end:   271,
          Query: &parser.Select{
            pos:      254,
            Distinct: false,
            AsStruct: false,
            Results:  []parser.SelectItem{
              &parser.ExprSelectItem{
                Expr: &parser.StructLiteral{
                  pos:    261,
                  end:    270,
                  Fields: []*parser.FieldType{},
                  Values: []parser.Expr{
                    &parser.IntLiteral{
                      pos:   262,
                      end:   263,
                      Base:  10,
                      Value: "1",
                    },
                    &parser.IntLiteral{
                      pos:   265,
                      end:   266,
                      Base:  10,
                      Value: "2",
                    },
                    &parser.IntLiteral{
                      pos:   268,
                      end:   269,
                      Base:  10,
                      Value: "3",
                    },
                  },
                },
              },
            },
            From:    (*parser.From)(nil),
            Where:   (*parser.Where)(nil),
            GroupBy: (*parser.GroupBy)(nil),
            Having:  (*parser.Having)(nil),
            OrderBy: (*parser.OrderBy)(nil),
            Limit:   (*parser.Limit)(nil),
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.ArraySubQuery{
          pos:   275,
          end:   299,
          Query: &parser.Select{
            pos:      281,
            Distinct: false,
            AsStruct: false,
            Results:  []parser.SelectItem{
              &parser.ExprSelectItem{
                Expr: &parser.StructLiteral{
                  pos:    288,
                  end:    298,
                  Fields: []*parser.FieldType{},
                  Values: []parser.Expr{},
                },
              },
            },
            From:    (*parser.From)(nil),
            Where:   (*parser.Where)(nil),
            GroupBy: (*parser.GroupBy)(nil),
            Having:  (*parser.Having)(nil),
            OrderBy: (*parser.OrderBy)(nil),
            Limit:   (*parser.Limit)(nil),
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.ExistsSubQuery{
          pos:   303,
          end:   324,
          Hint:  (*parser.Hint)(nil),
          Query: &parser.Select{
            pos:      310,
            Distinct: false,
            AsStruct: false,
            Results:  []parser.SelectItem{
              &parser.ExprSelectItem{
                Expr: &parser.StructLiteral{
                  pos:    317,
                  end:    323,
                  Fields: []*parser.FieldType{},
                  Values: []parser.Expr{
                    &parser.IntLiteral{
                      pos:   318,
                      end:   319,
                      Base:  10,
                      Value: "1",
                    },
                    &parser.IntLiteral{
                      pos:   321,
                      end:   322,
                      Base:  10,
                      Value: "2",
                    },
                  },
                },
              },
            },
            From:    (*parser.From)(nil),
            Where:   (*parser.Where)(nil),
            GroupBy: (*parser.GroupBy)(nil),
            Having:  (*parser.Having)(nil),
            OrderBy: (*parser.OrderBy)(nil),
            Limit:   (*parser.Limit)(nil),
          },
        },
      },
    },
    From:    (*parser.From)(nil),
    Where:   (*parser.Where)(nil),
    GroupBy: (*parser.GroupBy)(nil),
    Having:  (*parser.Having)(nil),
    OrderBy: (*parser.OrderBy)(nil),
    Limit:   (*parser.Limit)(nil),
  },
}

--- SQL
SELECT ARRAY(SELECT STRUCT(1, 2, 3)), ARRAY(SELECT STRUCT(1, 2, TRUE)), ARRAY(SELECT STRUCT<X INT64, Y INT64, Z INT64>(1, 2, 3)), ARRAY(SELECT STRUCT<INT64, INT64, INT64>(1, 2, 3)), ARRAY(SELECT STRUCT<X INT64, INT64, INT64>(1, 2, 3)), ARRAY(SELECT STRUCT(1, 2, 3)), ARRAY(SELECT STRUCT<>()), EXISTS(SELECT STRUCT(1, 2))
