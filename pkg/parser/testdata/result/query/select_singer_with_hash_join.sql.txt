--- select_singer_with_hash_join.sql
SELECT
  *
FROM
  Singers A
  HASH JOIN
  Singers B
  ON A.SingerID = B.SingerID
  APPLY JOIN
  Singer C
  ON B.SingerID = C.SingerID
  LOOP JOIN
  Singer D
  ON C.SingerID = D.SingerID

--- AST
&parser.QueryStatement{
  Hint:  (*parser.Hint)(nil),
  Query: &parser.Select{
    pos:      0,
    Distinct: false,
    AsStruct: false,
    Results:  []parser.SelectItem{
      &parser.Star{
        pos: 9,
      },
    },
    From: &parser.From{
      pos:   11,
      Items: []*parser.FromItem{
        &parser.FromItem{
          Source: &parser.Join{
            Op:     "INNER",
            Method: "LOOP",
            Hint:   (*parser.Hint)(nil),
            Left:   &parser.Join{
              Op:     "INNER",
              Method: "APPLY",
              Hint:   (*parser.Hint)(nil),
              Left:   &parser.Join{
                Op:     "INNER",
                Method: "HASH",
                Hint:   (*parser.Hint)(nil),
                Left:   &parser.Unnest{
                  pos:      18,
                  end:      27,
                  Implicit: true,
                  Expr:     &parser.Ident{
                    pos:  18,
                    end:  25,
                    Name: "Singers",
                  },
                  Hint: (*parser.Hint)(nil),
                  As:   &parser.AsAlias{
                    pos:   26,
                    Alias: &parser.Ident{
                      pos:  26,
                      end:  27,
                      Name: "A",
                    },
                  },
                  WithOffset: (*parser.WithOffset)(nil),
                },
                Right: &parser.Unnest{
                  pos:      42,
                  end:      51,
                  Implicit: true,
                  Expr:     &parser.Ident{
                    pos:  42,
                    end:  49,
                    Name: "Singers",
                  },
                  Hint: (*parser.Hint)(nil),
                  As:   &parser.AsAlias{
                    pos:   50,
                    Alias: &parser.Ident{
                      pos:  50,
                      end:  51,
                      Name: "B",
                    },
                  },
                  WithOffset: (*parser.WithOffset)(nil),
                },
                Cond: &parser.On{
                  pos:  54,
                  Expr: &parser.BinaryExpr{
                    Op:   "=",
                    Left: &parser.Path{
                      Idents: []*parser.Ident{
                        &parser.Ident{
                          pos:  57,
                          end:  58,
                          Name: "A",
                        },
                        &parser.Ident{
                          pos:  59,
                          end:  67,
                          Name: "SingerID",
                        },
                      },
                    },
                    Right: &parser.Path{
                      Idents: []*parser.Ident{
                        &parser.Ident{
                          pos:  70,
                          end:  71,
                          Name: "B",
                        },
                        &parser.Ident{
                          pos:  72,
                          end:  80,
                          Name: "SingerID",
                        },
                      },
                    },
                  },
                },
              },
              Right: &parser.Unnest{
                pos:      96,
                end:      104,
                Implicit: true,
                Expr:     &parser.Ident{
                  pos:  96,
                  end:  102,
                  Name: "Singer",
                },
                Hint: (*parser.Hint)(nil),
                As:   &parser.AsAlias{
                  pos:   103,
                  Alias: &parser.Ident{
                    pos:  103,
                    end:  104,
                    Name: "C",
                  },
                },
                WithOffset: (*parser.WithOffset)(nil),
              },
              Cond: &parser.On{
                pos:  107,
                Expr: &parser.BinaryExpr{
                  Op:   "=",
                  Left: &parser.Path{
                    Idents: []*parser.Ident{
                      &parser.Ident{
                        pos:  110,
                        end:  111,
                        Name: "B",
                      },
                      &parser.Ident{
                        pos:  112,
                        end:  120,
                        Name: "SingerID",
                      },
                    },
                  },
                  Right: &parser.Path{
                    Idents: []*parser.Ident{
                      &parser.Ident{
                        pos:  123,
                        end:  124,
                        Name: "C",
                      },
                      &parser.Ident{
                        pos:  125,
                        end:  133,
                        Name: "SingerID",
                      },
                    },
                  },
                },
              },
            },
            Right: &parser.Unnest{
              pos:      148,
              end:      156,
              Implicit: true,
              Expr:     &parser.Ident{
                pos:  148,
                end:  154,
                Name: "Singer",
              },
              Hint: (*parser.Hint)(nil),
              As:   &parser.AsAlias{
                pos:   155,
                Alias: &parser.Ident{
                  pos:  155,
                  end:  156,
                  Name: "D",
                },
              },
              WithOffset: (*parser.WithOffset)(nil),
            },
            Cond: &parser.On{
              pos:  159,
              Expr: &parser.BinaryExpr{
                Op:   "=",
                Left: &parser.Path{
                  Idents: []*parser.Ident{
                    &parser.Ident{
                      pos:  162,
                      end:  163,
                      Name: "C",
                    },
                    &parser.Ident{
                      pos:  164,
                      end:  172,
                      Name: "SingerID",
                    },
                  },
                },
                Right: &parser.Path{
                  Idents: []*parser.Ident{
                    &parser.Ident{
                      pos:  175,
                      end:  176,
                      Name: "D",
                    },
                    &parser.Ident{
                      pos:  177,
                      end:  185,
                      Name: "SingerID",
                    },
                  },
                },
              },
            },
          },
          TableSample: (*parser.TableSample)(nil),
        },
      },
    },
    Where:   (*parser.Where)(nil),
    GroupBy: (*parser.GroupBy)(nil),
    Having:  (*parser.Having)(nil),
    OrderBy: (*parser.OrderBy)(nil),
    Limit:   (*parser.Limit)(nil),
  },
}

--- SQL
SELECT * FROM Singers AS A INNER JOIN Singers AS B ON A.SingerID = B.SingerID INNER JOIN Singer AS C ON B.SingerID = C.SingerID INNER JOIN Singer AS D ON C.SingerID = D.SingerID
