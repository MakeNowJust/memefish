--- select_nest_complex.sql
select *
from (
    (((select 1 A union all (select 2)) union distinct (select 1)) limit 1)
  JOIN
    (select 1 A, 2 B) USING (A)
)
--- AST
&parser.QueryStatement{
  Hint:  (*parser.Hint)(nil),
  Query: &parser.Select{
    pos:      0,
    Distinct: false,
    AsStruct: false,
    Results:  []parser.SelectItem{
      &parser.Star{
        pos: 7,
      },
    },
    From: &parser.From{
      pos:   9,
      Items: []*parser.FromItem{
        &parser.FromItem{
          Source: &parser.ParenJoinExpr{
            pos:    14,
            end:    132,
            Source: &parser.Join{
              Op:     "INNER",
              Method: "",
              Hint:   (*parser.Hint)(nil),
              Left:   &parser.SubQueryJoinExpr{
                pos:   20,
                end:   91,
                Query: &parser.SubQuery{
                  pos:   21,
                  end:   82,
                  Query: &parser.CompoundQuery{
                    Op:       "UNION",
                    Distinct: true,
                    Queries:  []parser.QueryExpr{
                      &parser.SubQuery{
                        pos:   22,
                        end:   55,
                        Query: &parser.CompoundQuery{
                          Op:       "UNION",
                          Distinct: false,
                          Queries:  []parser.QueryExpr{
                            &parser.Select{
                              pos:      23,
                              Distinct: false,
                              AsStruct: false,
                              Results:  []parser.SelectItem{
                                &parser.Alias{
                                  Expr: &parser.IntLiteral{
                                    pos:   30,
                                    end:   31,
                                    Base:  10,
                                    Value: "1",
                                  },
                                  As: &parser.AsAlias{
                                    pos:   32,
                                    Alias: &parser.Ident{
                                      pos:  32,
                                      end:  33,
                                      Name: "A",
                                    },
                                  },
                                },
                              },
                              From:    (*parser.From)(nil),
                              Where:   (*parser.Where)(nil),
                              GroupBy: (*parser.GroupBy)(nil),
                              Having:  (*parser.Having)(nil),
                              OrderBy: (*parser.OrderBy)(nil),
                              Limit:   (*parser.Limit)(nil),
                            },
                            &parser.SubQuery{
                              pos:   44,
                              end:   54,
                              Query: &parser.Select{
                                pos:      45,
                                Distinct: false,
                                AsStruct: false,
                                Results:  []parser.SelectItem{
                                  &parser.ExprSelectItem{
                                    Expr: &parser.IntLiteral{
                                      pos:   52,
                                      end:   53,
                                      Base:  10,
                                      Value: "2",
                                    },
                                  },
                                },
                                From:    (*parser.From)(nil),
                                Where:   (*parser.Where)(nil),
                                GroupBy: (*parser.GroupBy)(nil),
                                Having:  (*parser.Having)(nil),
                                OrderBy: (*parser.OrderBy)(nil),
                                Limit:   (*parser.Limit)(nil),
                              },
                              OrderBy: (*parser.OrderBy)(nil),
                              Limit:   (*parser.Limit)(nil),
                            },
                          },
                          OrderBy: (*parser.OrderBy)(nil),
                          Limit:   (*parser.Limit)(nil),
                        },
                        OrderBy: (*parser.OrderBy)(nil),
                        Limit:   (*parser.Limit)(nil),
                      },
                      &parser.SubQuery{
                        pos:   71,
                        end:   81,
                        Query: &parser.Select{
                          pos:      72,
                          Distinct: false,
                          AsStruct: false,
                          Results:  []parser.SelectItem{
                            &parser.ExprSelectItem{
                              Expr: &parser.IntLiteral{
                                pos:   79,
                                end:   80,
                                Base:  10,
                                Value: "1",
                              },
                            },
                          },
                          From:    (*parser.From)(nil),
                          Where:   (*parser.Where)(nil),
                          GroupBy: (*parser.GroupBy)(nil),
                          Having:  (*parser.Having)(nil),
                          OrderBy: (*parser.OrderBy)(nil),
                          Limit:   (*parser.Limit)(nil),
                        },
                        OrderBy: (*parser.OrderBy)(nil),
                        Limit:   (*parser.Limit)(nil),
                      },
                    },
                    OrderBy: (*parser.OrderBy)(nil),
                    Limit:   (*parser.Limit)(nil),
                  },
                  OrderBy: (*parser.OrderBy)(nil),
                  Limit:   &parser.Limit{
                    pos:   83,
                    Count: &parser.IntLiteral{
                      pos:   89,
                      end:   90,
                      Base:  10,
                      Value: "1",
                    },
                    Offset: (*parser.Offset)(nil),
                  },
                },
                As: (*parser.AsAlias)(nil),
              },
              Right: &parser.SubQueryJoinExpr{
                pos:   103,
                end:   120,
                Query: &parser.Select{
                  pos:      104,
                  Distinct: false,
                  AsStruct: false,
                  Results:  []parser.SelectItem{
                    &parser.Alias{
                      Expr: &parser.IntLiteral{
                        pos:   111,
                        end:   112,
                        Base:  10,
                        Value: "1",
                      },
                      As: &parser.AsAlias{
                        pos:   113,
                        Alias: &parser.Ident{
                          pos:  113,
                          end:  114,
                          Name: "A",
                        },
                      },
                    },
                    &parser.Alias{
                      Expr: &parser.IntLiteral{
                        pos:   116,
                        end:   117,
                        Base:  10,
                        Value: "2",
                      },
                      As: &parser.AsAlias{
                        pos:   118,
                        Alias: &parser.Ident{
                          pos:  118,
                          end:  119,
                          Name: "B",
                        },
                      },
                    },
                  },
                  From:    (*parser.From)(nil),
                  Where:   (*parser.Where)(nil),
                  GroupBy: (*parser.GroupBy)(nil),
                  Having:  (*parser.Having)(nil),
                  OrderBy: (*parser.OrderBy)(nil),
                  Limit:   (*parser.Limit)(nil),
                },
                As: (*parser.AsAlias)(nil),
              },
              Cond: &parser.Using{
                pos:    121,
                end:    130,
                Idents: []*parser.Ident{
                  &parser.Ident{
                    pos:  128,
                    end:  129,
                    Name: "A",
                  },
                },
              },
            },
          },
          TableSample: (*parser.TableSample)(nil),
        },
      },
    },
    Where:   (*parser.Where)(nil),
    GroupBy: (*parser.GroupBy)(nil),
    Having:  (*parser.Having)(nil),
    OrderBy: (*parser.OrderBy)(nil),
    Limit:   (*parser.Limit)(nil),
  },
}

--- SQL
SELECT * FROM ((((SELECT 1 AS A UNION ALL (SELECT 2)) UNION DISTINCT (SELECT 1)) LIMIT 1) INNER JOIN (SELECT 1 AS A, 2 AS B) USING (A))
