--- select_expr.sql
select 1 + 2, 1 - 2,
       1 * 2, 2 / 2,
       +1++1, -1+-1,
       +1.2, -3.4,
       ~1 ^ ~1,
       1 ^ 2, 2 & 1, 2 | 1,
       1 << 2, 2 >> 1,
       foo.bar * +foo.bar * -foo.bar,
       (select 1 `1`).1,
       NOT NOT true,
       [1, 2, 3][offset(1)],
       [1, 2, 3][`offset`(1)],
       [1, 2, 3][ordinal(1)],
       case
       when 1 = 1 then "1 = 1"
       else            "else"
       end,
       case 1
       when 1 then "1"
       when 2 then "2"
       else        "other"
       end,
       date_add(date "2019-09-01", interval 5 day),
       timestamp_add(timestamp "2019-09-01 08:11:22", interval 5 hour),
       1 in (1, 2, 3),
       2 in unnest([1, 2, 3]),
       3 in (select 1 union all select 2 union all select 3)
--- AST
&parser.QueryStatement{
  Hint:  (*parser.Hint)(nil),
  Query: &parser.Select{
    pos:      0,
    Distinct: false,
    AsStruct: false,
    Results:  []parser.SelectItem{
      &parser.ExprSelectItem{
        Expr: &parser.BinaryExpr{
          Op:   "+",
          Left: &parser.IntLiteral{
            pos:   7,
            end:   8,
            Base:  10,
            Value: "1",
          },
          Right: &parser.IntLiteral{
            pos:   11,
            end:   12,
            Base:  10,
            Value: "2",
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.BinaryExpr{
          Op:   "-",
          Left: &parser.IntLiteral{
            pos:   14,
            end:   15,
            Base:  10,
            Value: "1",
          },
          Right: &parser.IntLiteral{
            pos:   18,
            end:   19,
            Base:  10,
            Value: "2",
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.BinaryExpr{
          Op:   "*",
          Left: &parser.IntLiteral{
            pos:   28,
            end:   29,
            Base:  10,
            Value: "1",
          },
          Right: &parser.IntLiteral{
            pos:   32,
            end:   33,
            Base:  10,
            Value: "2",
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.BinaryExpr{
          Op:   "/",
          Left: &parser.IntLiteral{
            pos:   35,
            end:   36,
            Base:  10,
            Value: "2",
          },
          Right: &parser.IntLiteral{
            pos:   39,
            end:   40,
            Base:  10,
            Value: "2",
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.BinaryExpr{
          Op:   "+",
          Left: &parser.IntLiteral{
            pos:   49,
            end:   51,
            Base:  10,
            Value: "+1",
          },
          Right: &parser.IntLiteral{
            pos:   52,
            end:   54,
            Base:  10,
            Value: "+1",
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.BinaryExpr{
          Op:   "+",
          Left: &parser.IntLiteral{
            pos:   56,
            end:   58,
            Base:  10,
            Value: "-1",
          },
          Right: &parser.IntLiteral{
            pos:   59,
            end:   61,
            Base:  10,
            Value: "-1",
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.FloatLiteral{
          pos:   70,
          end:   74,
          Value: "+1.2",
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.FloatLiteral{
          pos:   76,
          end:   80,
          Value: "-3.4",
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.BinaryExpr{
          Op:   "^",
          Left: &parser.UnaryExpr{
            pos:  89,
            Op:   "~",
            Expr: &parser.IntLiteral{
              pos:   90,
              end:   91,
              Base:  10,
              Value: "1",
            },
          },
          Right: &parser.UnaryExpr{
            pos:  94,
            Op:   "~",
            Expr: &parser.IntLiteral{
              pos:   95,
              end:   96,
              Base:  10,
              Value: "1",
            },
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.BinaryExpr{
          Op:   "^",
          Left: &parser.IntLiteral{
            pos:   105,
            end:   106,
            Base:  10,
            Value: "1",
          },
          Right: &parser.IntLiteral{
            pos:   109,
            end:   110,
            Base:  10,
            Value: "2",
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.BinaryExpr{
          Op:   "&",
          Left: &parser.IntLiteral{
            pos:   112,
            end:   113,
            Base:  10,
            Value: "2",
          },
          Right: &parser.IntLiteral{
            pos:   116,
            end:   117,
            Base:  10,
            Value: "1",
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.BinaryExpr{
          Op:   "|",
          Left: &parser.IntLiteral{
            pos:   119,
            end:   120,
            Base:  10,
            Value: "2",
          },
          Right: &parser.IntLiteral{
            pos:   123,
            end:   124,
            Base:  10,
            Value: "1",
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.BinaryExpr{
          Op:   "<<",
          Left: &parser.IntLiteral{
            pos:   133,
            end:   134,
            Base:  10,
            Value: "1",
          },
          Right: &parser.IntLiteral{
            pos:   138,
            end:   139,
            Base:  10,
            Value: "2",
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.BinaryExpr{
          Op:   ">>",
          Left: &parser.IntLiteral{
            pos:   141,
            end:   142,
            Base:  10,
            Value: "2",
          },
          Right: &parser.IntLiteral{
            pos:   146,
            end:   147,
            Base:  10,
            Value: "1",
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.BinaryExpr{
          Op:   "*",
          Left: &parser.BinaryExpr{
            Op:   "*",
            Left: &parser.Path{
              Idents: []*parser.Ident{
                &parser.Ident{
                  pos:  156,
                  end:  159,
                  Name: "foo",
                },
                &parser.Ident{
                  pos:  160,
                  end:  163,
                  Name: "bar",
                },
              },
            },
            Right: &parser.UnaryExpr{
              pos:  166,
              Op:   "+",
              Expr: &parser.Path{
                Idents: []*parser.Ident{
                  &parser.Ident{
                    pos:  167,
                    end:  170,
                    Name: "foo",
                  },
                  &parser.Ident{
                    pos:  171,
                    end:  174,
                    Name: "bar",
                  },
                },
              },
            },
          },
          Right: &parser.UnaryExpr{
            pos:  177,
            Op:   "-",
            Expr: &parser.Path{
              Idents: []*parser.Ident{
                &parser.Ident{
                  pos:  178,
                  end:  181,
                  Name: "foo",
                },
                &parser.Ident{
                  pos:  182,
                  end:  185,
                  Name: "bar",
                },
              },
            },
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.SelectorExpr{
          Expr: &parser.ScalarSubQuery{
            pos:   194,
            end:   208,
            Query: &parser.Select{
              pos:      195,
              Distinct: false,
              AsStruct: false,
              Results:  []parser.SelectItem{
                &parser.Alias{
                  Expr: &parser.IntLiteral{
                    pos:   202,
                    end:   203,
                    Base:  10,
                    Value: "1",
                  },
                  As: &parser.AsAlias{
                    pos:   204,
                    Alias: &parser.Ident{
                      pos:  204,
                      end:  207,
                      Name: "1",
                    },
                  },
                },
              },
              From:    (*parser.From)(nil),
              Where:   (*parser.Where)(nil),
              GroupBy: (*parser.GroupBy)(nil),
              Having:  (*parser.Having)(nil),
              OrderBy: (*parser.OrderBy)(nil),
              Limit:   (*parser.Limit)(nil),
            },
          },
          Member: &parser.Ident{
            pos:  209,
            end:  210,
            Name: "1",
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.UnaryExpr{
          pos:  0,
          Op:   "NOT",
          Expr: &parser.UnaryExpr{
            pos:  0,
            Op:   "NOT",
            Expr: &parser.BoolLiteral{
              pos:   227,
              Value: true,
            },
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.IndexExpr{
          end:     260,
          Ordinal: false,
          Expr:    &parser.ArrayLiteral{
            pos:    240,
            end:    249,
            Type:   nil,
            Values: []parser.Expr{
              &parser.IntLiteral{
                pos:   241,
                end:   242,
                Base:  10,
                Value: "1",
              },
              &parser.IntLiteral{
                pos:   244,
                end:   245,
                Base:  10,
                Value: "2",
              },
              &parser.IntLiteral{
                pos:   247,
                end:   248,
                Base:  10,
                Value: "3",
              },
            },
          },
          Index: &parser.IntLiteral{
            pos:   257,
            end:   258,
            Base:  10,
            Value: "1",
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.IndexExpr{
          end:     291,
          Ordinal: false,
          Expr:    &parser.ArrayLiteral{
            pos:    269,
            end:    278,
            Type:   nil,
            Values: []parser.Expr{
              &parser.IntLiteral{
                pos:   270,
                end:   271,
                Base:  10,
                Value: "1",
              },
              &parser.IntLiteral{
                pos:   273,
                end:   274,
                Base:  10,
                Value: "2",
              },
              &parser.IntLiteral{
                pos:   276,
                end:   277,
                Base:  10,
                Value: "3",
              },
            },
          },
          Index: &parser.IntLiteral{
            pos:   288,
            end:   289,
            Base:  10,
            Value: "1",
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.IndexExpr{
          end:     321,
          Ordinal: true,
          Expr:    &parser.ArrayLiteral{
            pos:    300,
            end:    309,
            Type:   nil,
            Values: []parser.Expr{
              &parser.IntLiteral{
                pos:   301,
                end:   302,
                Base:  10,
                Value: "1",
              },
              &parser.IntLiteral{
                pos:   304,
                end:   305,
                Base:  10,
                Value: "2",
              },
              &parser.IntLiteral{
                pos:   307,
                end:   308,
                Base:  10,
                Value: "3",
              },
            },
          },
          Index: &parser.IntLiteral{
            pos:   318,
            end:   319,
            Base:  10,
            Value: "1",
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.CaseExpr{
          pos:   330,
          end:   406,
          Expr:  nil,
          Whens: []*parser.CaseWhen{
            &parser.CaseWhen{
              pos:  342,
              Cond: &parser.BinaryExpr{
                Op:   "=",
                Left: &parser.IntLiteral{
                  pos:   347,
                  end:   348,
                  Base:  10,
                  Value: "1",
                },
                Right: &parser.IntLiteral{
                  pos:   351,
                  end:   352,
                  Base:  10,
                  Value: "1",
                },
              },
              Then: &parser.StringLiteral{
                pos:   358,
                end:   365,
                Value: "1 = 1",
              },
            },
          },
          Else: &parser.CaseElse{
            pos:  373,
            Expr: &parser.StringLiteral{
              pos:   389,
              end:   395,
              Value: "else",
            },
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.CaseExpr{
          pos:  415,
          end:  505,
          Expr: &parser.IntLiteral{
            pos:   420,
            end:   421,
            Base:  10,
            Value: "1",
          },
          Whens: []*parser.CaseWhen{
            &parser.CaseWhen{
              pos:  429,
              Cond: &parser.IntLiteral{
                pos:   434,
                end:   435,
                Base:  10,
                Value: "1",
              },
              Then: &parser.StringLiteral{
                pos:   441,
                end:   444,
                Value: "1",
              },
            },
            &parser.CaseWhen{
              pos:  452,
              Cond: &parser.IntLiteral{
                pos:   457,
                end:   458,
                Base:  10,
                Value: "2",
              },
              Then: &parser.StringLiteral{
                pos:   464,
                end:   467,
                Value: "2",
              },
            },
          },
          Else: &parser.CaseElse{
            pos:  475,
            Expr: &parser.StringLiteral{
              pos:   487,
              end:   494,
              Value: "other",
            },
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.CallExpr{
          end:  557,
          Func: &parser.Ident{
            pos:  514,
            end:  522,
            Name: "date_add",
          },
          Distinct: false,
          Args:     []*parser.Arg{
            &parser.Arg{
              pos:  523,
              Expr: &parser.DateLiteral{
                pos:   523,
                end:   540,
                Value: "2019-09-01",
              },
              IntervalUnit: (*parser.Ident)(nil),
            },
            &parser.Arg{
              pos:  542,
              Expr: &parser.IntLiteral{
                pos:   551,
                end:   552,
                Base:  10,
                Value: "5",
              },
              IntervalUnit: &parser.Ident{
                pos:  553,
                end:  556,
                Name: "day",
              },
            },
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.CallExpr{
          end:  629,
          Func: &parser.Ident{
            pos:  566,
            end:  579,
            Name: "timestamp_add",
          },
          Distinct: false,
          Args:     []*parser.Arg{
            &parser.Arg{
              pos:  580,
              Expr: &parser.TimestampLiteral{
                pos:   580,
                end:   611,
                Value: "2019-09-01 08:11:22",
              },
              IntervalUnit: (*parser.Ident)(nil),
            },
            &parser.Arg{
              pos:  613,
              Expr: &parser.IntLiteral{
                pos:   622,
                end:   623,
                Base:  10,
                Value: "5",
              },
              IntervalUnit: &parser.Ident{
                pos:  624,
                end:  628,
                Name: "hour",
              },
            },
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.InExpr{
          Not:  false,
          Left: &parser.IntLiteral{
            pos:   638,
            end:   639,
            Base:  10,
            Value: "1",
          },
          Right: &parser.ValuesInCondition{
            pos:   643,
            end:   652,
            Exprs: []parser.Expr{
              &parser.IntLiteral{
                pos:   644,
                end:   645,
                Base:  10,
                Value: "1",
              },
              &parser.IntLiteral{
                pos:   647,
                end:   648,
                Base:  10,
                Value: "2",
              },
              &parser.IntLiteral{
                pos:   650,
                end:   651,
                Base:  10,
                Value: "3",
              },
            },
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.InExpr{
          Not:  false,
          Left: &parser.IntLiteral{
            pos:   661,
            end:   662,
            Base:  10,
            Value: "2",
          },
          Right: &parser.UnnestInCondition{
            pos:  666,
            end:  683,
            Expr: &parser.ArrayLiteral{
              pos:    673,
              end:    682,
              Type:   nil,
              Values: []parser.Expr{
                &parser.IntLiteral{
                  pos:   674,
                  end:   675,
                  Base:  10,
                  Value: "1",
                },
                &parser.IntLiteral{
                  pos:   677,
                  end:   678,
                  Base:  10,
                  Value: "2",
                },
                &parser.IntLiteral{
                  pos:   680,
                  end:   681,
                  Base:  10,
                  Value: "3",
                },
              },
            },
          },
        },
      },
      &parser.ExprSelectItem{
        Expr: &parser.InExpr{
          Not:  false,
          Left: &parser.IntLiteral{
            pos:   692,
            end:   693,
            Base:  10,
            Value: "3",
          },
          Right: &parser.SubQueryInCondition{
            pos:   697,
            end:   745,
            Query: &parser.CompoundQuery{
              Op:       "UNION",
              Distinct: false,
              Queries:  []parser.QueryExpr{
                &parser.Select{
                  pos:      698,
                  Distinct: false,
                  AsStruct: false,
                  Results:  []parser.SelectItem{
                    &parser.ExprSelectItem{
                      Expr: &parser.IntLiteral{
                        pos:   705,
                        end:   706,
                        Base:  10,
                        Value: "1",
                      },
                    },
                  },
                  From:    (*parser.From)(nil),
                  Where:   (*parser.Where)(nil),
                  GroupBy: (*parser.GroupBy)(nil),
                  Having:  (*parser.Having)(nil),
                  OrderBy: (*parser.OrderBy)(nil),
                  Limit:   (*parser.Limit)(nil),
                },
                &parser.Select{
                  pos:      717,
                  Distinct: false,
                  AsStruct: false,
                  Results:  []parser.SelectItem{
                    &parser.ExprSelectItem{
                      Expr: &parser.IntLiteral{
                        pos:   724,
                        end:   725,
                        Base:  10,
                        Value: "2",
                      },
                    },
                  },
                  From:    (*parser.From)(nil),
                  Where:   (*parser.Where)(nil),
                  GroupBy: (*parser.GroupBy)(nil),
                  Having:  (*parser.Having)(nil),
                  OrderBy: (*parser.OrderBy)(nil),
                  Limit:   (*parser.Limit)(nil),
                },
                &parser.Select{
                  pos:      736,
                  Distinct: false,
                  AsStruct: false,
                  Results:  []parser.SelectItem{
                    &parser.ExprSelectItem{
                      Expr: &parser.IntLiteral{
                        pos:   743,
                        end:   744,
                        Base:  10,
                        Value: "3",
                      },
                    },
                  },
                  From:    (*parser.From)(nil),
                  Where:   (*parser.Where)(nil),
                  GroupBy: (*parser.GroupBy)(nil),
                  Having:  (*parser.Having)(nil),
                  OrderBy: (*parser.OrderBy)(nil),
                  Limit:   (*parser.Limit)(nil),
                },
              },
              OrderBy: (*parser.OrderBy)(nil),
              Limit:   (*parser.Limit)(nil),
            },
          },
        },
      },
    },
    From:    (*parser.From)(nil),
    Where:   (*parser.Where)(nil),
    GroupBy: (*parser.GroupBy)(nil),
    Having:  (*parser.Having)(nil),
    OrderBy: (*parser.OrderBy)(nil),
    Limit:   (*parser.Limit)(nil),
  },
}

--- SQL
SELECT 1 + 2, 1 - 2, 1 * 2, 2 / 2, +1 + +1, -1 + -1, +1.2, -3.4, ~1 ^ ~1, 1 ^ 2, 2 & 1, 2 | 1, 1 << 2, 2 >> 1, foo.bar * +foo.bar * -foo.bar, (SELECT 1 AS `1`).`1`, NOT NOT TRUE, ARRAY[1, 2, 3][OFFSET(1)], ARRAY[1, 2, 3][OFFSET(1)], ARRAY[1, 2, 3][ORDINAL(1)], CASE WHEN 1 = 1 THEN "1 = 1" ELSE "else" END, CASE 1 WHEN 1 THEN "1" WHEN 2 THEN "2" ELSE "other" END, date_add(DATE "2019-09-01", INTERVAL 5 day), timestamp_add(TIMESTAMP "2019-09-01 08:11:22", INTERVAL 5 hour), 1 IN (1, 2, 3), 2 IN UNNEST(ARRAY[1, 2, 3]), 3 IN (SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3)
