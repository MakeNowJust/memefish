--- select_struct_compare_eq.sql
SELECT ARRAY(
  SELECT
    *
  FROM
    (SELECT STRUCT<X INT64, Y INT64, Y INT64>(1, 2, 3)) AS S
  WHERE S = STRUCT(STRUCT(1, 2, 3))
)

--- AST
&parser.QueryStatement{
  Hint:  (*parser.Hint)(nil),
  Query: &parser.Select{
    pos:      0,
    Distinct: false,
    AsStruct: false,
    Results:  []parser.SelectItem{
      &parser.ExprSelectItem{
        Expr: &parser.ArraySubQuery{
          pos:   7,
          end:   134,
          Query: &parser.Select{
            pos:      16,
            Distinct: false,
            AsStruct: false,
            Results:  []parser.SelectItem{
              &parser.Star{
                pos: 27,
              },
            },
            From: &parser.From{
              pos:    31,
              Source: &parser.SubQueryTableExpr{
                pos:   40,
                end:   96,
                Query: &parser.Select{
                  pos:      41,
                  Distinct: false,
                  AsStruct: false,
                  Results:  []parser.SelectItem{
                    &parser.ExprSelectItem{
                      Expr: &parser.StructLiteral{
                        pos:    48,
                        end:    90,
                        Fields: []*parser.FieldType{
                          &parser.FieldType{
                            Member: &parser.Ident{
                              pos:  55,
                              end:  56,
                              Name: "X",
                            },
                            Type: &parser.SimpleType{
                              pos:  57,
                              Name: "INT64",
                            },
                          },
                          &parser.FieldType{
                            Member: &parser.Ident{
                              pos:  64,
                              end:  65,
                              Name: "Y",
                            },
                            Type: &parser.SimpleType{
                              pos:  66,
                              Name: "INT64",
                            },
                          },
                          &parser.FieldType{
                            Member: &parser.Ident{
                              pos:  73,
                              end:  74,
                              Name: "Y",
                            },
                            Type: &parser.SimpleType{
                              pos:  75,
                              Name: "INT64",
                            },
                          },
                        },
                        Values: []parser.Expr{
                          &parser.IntLiteral{
                            pos:   82,
                            end:   83,
                            Base:  10,
                            Value: "1",
                          },
                          &parser.IntLiteral{
                            pos:   85,
                            end:   86,
                            Base:  10,
                            Value: "2",
                          },
                          &parser.IntLiteral{
                            pos:   88,
                            end:   89,
                            Base:  10,
                            Value: "3",
                          },
                        },
                      },
                    },
                  },
                  From:    (*parser.From)(nil),
                  Where:   (*parser.Where)(nil),
                  GroupBy: (*parser.GroupBy)(nil),
                  Having:  (*parser.Having)(nil),
                  OrderBy: (*parser.OrderBy)(nil),
                  Limit:   (*parser.Limit)(nil),
                },
                As: &parser.AsAlias{
                  pos:   92,
                  Alias: &parser.Ident{
                    pos:  95,
                    end:  96,
                    Name: "S",
                  },
                },
                Sample: (*parser.TableSample)(nil),
              },
            },
            Where: &parser.Where{
              pos:  99,
              Expr: &parser.BinaryExpr{
                Op:   "=",
                Left: &parser.Ident{
                  pos:  105,
                  end:  106,
                  Name: "S",
                },
                Right: &parser.StructLiteral{
                  pos:    109,
                  end:    132,
                  Fields: []*parser.FieldType{},
                  Values: []parser.Expr{
                    &parser.StructLiteral{
                      pos:    116,
                      end:    131,
                      Fields: []*parser.FieldType{},
                      Values: []parser.Expr{
                        &parser.IntLiteral{
                          pos:   123,
                          end:   124,
                          Base:  10,
                          Value: "1",
                        },
                        &parser.IntLiteral{
                          pos:   126,
                          end:   127,
                          Base:  10,
                          Value: "2",
                        },
                        &parser.IntLiteral{
                          pos:   129,
                          end:   130,
                          Base:  10,
                          Value: "3",
                        },
                      },
                    },
                  },
                },
              },
            },
            GroupBy: (*parser.GroupBy)(nil),
            Having:  (*parser.Having)(nil),
            OrderBy: (*parser.OrderBy)(nil),
            Limit:   (*parser.Limit)(nil),
          },
        },
      },
    },
    From:    (*parser.From)(nil),
    Where:   (*parser.Where)(nil),
    GroupBy: (*parser.GroupBy)(nil),
    Having:  (*parser.Having)(nil),
    OrderBy: (*parser.OrderBy)(nil),
    Limit:   (*parser.Limit)(nil),
  },
}

--- SQL
SELECT ARRAY(SELECT * FROM (SELECT STRUCT<X INT64, Y INT64, Y INT64>(1, 2, 3)) AS S WHERE S = STRUCT(STRUCT(1, 2, 3)))
